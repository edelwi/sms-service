version: '3.8'

services:

  sms: # service name

#build the image for the web service from the dockerfile in parent directory.
    build: .

# command directive passes the parameters to the service and they will be executed by the service.
#  In this example, these are django commands which will be executed in the container where django lives.
    command: python app.py

# map data and files from parent directory in host to microservice directory in docker container
    volumes:
      - .:/sms_ms

    ports:
      - 50051:50051

# file where env variables are stored. Used as best practice so as not to expose secret keys
    env_file:
      - .env_demo # name of the env file

# name of the image
    image: sms_ms

# expose the port to other services defined here so that they can access this service via the exposed port.
    expose:
      - ${GRPC_PORT} # retrieved from the .env file

    restart: "on-failure"

# cannot start if db service is not up and running
    depends_on:
      - redis
      - rabbitmq


  rabbitmq:
    image: rabbitmq:3.12
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"

  redis:
    image: redis
    ports:
    - "6379:6379"

  worker:
    # celery
    depends_on:
      - rabbitmq
      - redis

volumes:
  redis_data: