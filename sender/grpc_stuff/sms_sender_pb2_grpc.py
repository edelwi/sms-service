# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sender.grpc_stuff.sms_sender_pb2 as sms__sender__pb2


class SMSServiceStub(object):
    """Service to send SMS and get status
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/SMSService/SendMessage',
                request_serializer=sms__sender__pb2.SMSMessage.SerializeToString,
                response_deserializer=sms__sender__pb2.MessageID.FromString,
                )
        self.GetMessageStatus = channel.unary_unary(
                '/SMSService/GetMessageStatus',
                request_serializer=sms__sender__pb2.MessageID.SerializeToString,
                response_deserializer=sms__sender__pb2.MessageStatus.FromString,
                )
        self.GetDeliveryStatus = channel.unary_unary(
                '/SMSService/GetDeliveryStatus',
                request_serializer=sms__sender__pb2.MessageID.SerializeToString,
                response_deserializer=sms__sender__pb2.DeliveryStatus.FromString,
                )


class SMSServiceServicer(object):
    """Service to send SMS and get status
    """

    def SendMessage(self, request, context):
        """Send message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessageStatus(self, request, context):
        """Get message status (sent or not)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeliveryStatus(self, request, context):
        """Get delivery report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SMSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=sms__sender__pb2.SMSMessage.FromString,
                    response_serializer=sms__sender__pb2.MessageID.SerializeToString,
            ),
            'GetMessageStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessageStatus,
                    request_deserializer=sms__sender__pb2.MessageID.FromString,
                    response_serializer=sms__sender__pb2.MessageStatus.SerializeToString,
            ),
            'GetDeliveryStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeliveryStatus,
                    request_deserializer=sms__sender__pb2.MessageID.FromString,
                    response_serializer=sms__sender__pb2.DeliveryStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SMSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SMSService(object):
    """Service to send SMS and get status
    """

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SMSService/SendMessage',
            sms__sender__pb2.SMSMessage.SerializeToString,
            sms__sender__pb2.MessageID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMessageStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SMSService/GetMessageStatus',
            sms__sender__pb2.MessageID.SerializeToString,
            sms__sender__pb2.MessageStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeliveryStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SMSService/GetDeliveryStatus',
            sms__sender__pb2.MessageID.SerializeToString,
            sms__sender__pb2.DeliveryStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
